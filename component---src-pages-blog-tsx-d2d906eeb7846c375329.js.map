{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/pages/blog.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["loader","enqueue","React","createContext","withLayout","props","posts","data","edges","Posts","Box","map","node","frontmatter","slug","fields","key","bg","borderWidth","rounded","p","color","shadow","mt","to","title","console","log","pageQuery","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"sKAcyBA,QAAOC,QAELC,IAAMC,cAAc,I,4BChB/C,0CAsGeC,uBA/FE,SAACC,GAEhB,IAAMC,EAAQD,EAAME,KAAKD,MAAME,MAKzBC,EACJ,gBAACC,EAAA,EAAD,KACGJ,EAAMK,KAAI,YAA6B,IAA1BC,EAA0B,EAA1BA,KAEVC,EAIED,EAJFC,YAEUC,EAERF,EAFFG,OAAUD,KAiCZ,OACE,gBAACJ,EAAA,EAAD,CACEM,IAAKF,EACLG,GAAG,OACHC,YAAY,MACZC,QAAQ,KACRC,EAAG,EACHC,MAAM,OACNC,OAAO,mBACPC,GAAG,QAEH,gBAAC,IAAD,CAAMC,GAAIV,GAAOD,EAAYY,YAmCvC,OAFAC,QAAQC,IAAItB,GAELI,KA5FT,IAiGamB,EAAY,c,qBCxGzB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGElC,IAAMmC,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-blog-tsx-d2d906eeb7846c375329.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { Box } from \"@chakra-ui/core\"\n// import { ImageSharp } from \"../graphql-types\"\n// import { get } from \"lodash\"\nimport { withLayout } from \"../components/Layout/index\"\n\nconst BlogPage = (props: any): any => {\n  // const tags = props.data.tags.group\n  const posts = props.data.posts.edges\n  // const { pathname } = props.location\n  // const pageCount = Math.ceil(props.data.posts.totalCount / 10)\n\n  // TODO export posts in a proper component\n  const Posts = (\n    <Box>\n      {posts.map(({ node }: { node: any }) => {\n        const {\n          frontmatter,\n          // timeToRead,\n          fields: { slug }\n          // excerpt\n        } = node\n        // const avatar = frontmatter.author.avatar.children[0] as ImageSharp\n        // const cover = get(frontmatter, \"image.children.0.fixed\", {})\n\n        // const extra = (\n        //   <Comment.Group>\n        //     <Comment>\n        //       <Comment.Avatar\n        //         src={avatar.fixed.src}\n        //         srcSet={avatar.fixed.srcSet}\n        //       />\n        //       <Comment.Content>\n        //         <Comment.Author style={{ fontWeight: 400 }}>\n        //           {frontmatter.author.id}\n        //         </Comment.Author>\n        //         <Comment.Metadata style={{ margin: 0 }}>\n        //           {frontmatter.updatedDate} - {timeToRead} min read\n        //         </Comment.Metadata>\n        //       </Comment.Content>\n        //     </Comment>\n        //   </Comment.Group>\n        // )\n\n        // const description = (\n        //   <Card.Description>\n        //     {excerpt}\n        //     <br />\n        //     <Link to={slug}>Read moreâ€¦</Link>\n        //   </Card.Description>\n        // )\n\n        return (\n          <Box\n            key={slug}\n            bg=\"#eee\"\n            borderWidth=\"1px\"\n            rounded=\"lg\"\n            p={4}\n            color=\"#333\"\n            shadow=\"0px 0px 5px #333\"\n            mt=\"10px\"\n          >\n            <Link to={slug}>{frontmatter.title}</Link>\n          </Box>\n        )\n      })}\n    </Box>\n  )\n\n  // return (\n  //   <Container>\n  //     {/* Title */}\n  //     <BlogTitle />\n\n  //     {/* Content */}\n  //     <Segment vertical>\n  //       <Grid padded style={{ justifyContent: \"space-around\" }}>\n  //         <div style={{ maxWidth: 600 }}>\n  //           {Posts}\n  //           <Segment vertical textAlign=\"center\">\n  //             <BlogPagination\n  //               Link={Link}\n  //               pathname={pathname}\n  //               pageCount={pageCount}\n  //             />\n  //           </Segment>\n  //         </div>\n  //         <div>\n  //           <TagsCard Link={Link} tags={tags} tag={props.pageContext.tag} />\n  //         </div>\n  //       </Grid>\n  //     </Segment>\n  //   </Container>\n  // )\n\n  console.log(props)\n\n  return Posts\n}\n\nexport default withLayout(BlogPage)\n\nexport const pageQuery = graphql`\n  query PageBlog {\n    # Get tags\n    tags: allMarkdownRemark(filter: { frontmatter: { draft: { ne: true } } }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n\n    # Get posts\n    posts: allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___updatedDate] }\n      filter: {\n        frontmatter: { draft: { ne: true } }\n        fileAbsolutePath: { regex: \"/blog/\" }\n      }\n      limit: 10\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          # timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            updatedDate(formatString: \"DD MMMM, YYYY\")\n            image {\n              children {\n                ... on ImageSharp {\n                  fixed(width: 700, height: 100) {\n                    src\n                    srcSet\n                  }\n                }\n              }\n            }\n            author {\n              id\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(width: 35, height: 35) {\n                      src\n                      srcSet\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}